name: release

on:
  workflow_dispatch:

env:
  RELEASE_VERSION: 4.11.1
  NEXT_DEV_VERSION: 4.11.2-SNAPSHOT

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - id: checkout
        uses: actions/checkout@v2
      - id: setup
        name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - id: create_settings_xml
        name: maven-settings-xml-action
        uses: whelk-io/maven-settings-xml-action@v18
        with:
          repositories: >
            [
              {
                "id": "central",
                "url": "http://central",
                "releases": {
                  "enabled": "true"
                },
                "snapshots": {
                  "enabled": "true"
                }
              }
            ]
          plugin_repositories: >
            [
              {
                "id": "central",
                "url": "http://central",
                "releases": {
                  "enabled": "true"
                },
                "snapshots": {
                  "enabled": "true"
                }
              }
            ]
          servers: >
            [
              {
                "id": "${{ secrets.NEXUS_ID }}",
                "username": "${{ secrets.NEXUS_USER }}",
                "password": "${{ secrets.NEXUS_USER_PW }}"
              }
            ]
          mirrors: >
            [
              {
                "id": "${{ secrets.NEXUS_ID }}",
                "mirrorOf": "central",
                "url": "${{ secrets.NEXUS_URL }}"
              }
            ]
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ~/.node
            ~/.node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - id: project_artifact_id
        name: Extract Maven project artifactId
        run: echo ::set-output name=artifactId::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.artifactId}' --non-recursive exec:exec)
      - id: write_release_versions_to_manifest
        name: Update versions in manifest.json files to ${{ env.RELEASE_VERSION }}
        run: mvn validate -P write-release-versions -Dreplace.target.version=${{ env.RELEASE_VERSION }}
      - id: write_release_versions_to_pom
        name: Update versions in pom.xml files to ${{ env.RELEASE_VERSION }}
        run: mvn versions:set -DnewVersion=${{ env.RELEASE_VERSION }} -DgenerateBackupPoms=false
      - id: check_in_release_versions
        name: Write release versions
        run: mvn scm:checkin -DpushChanges=false -Dmessage=\"[update-version] to ${{ env.RELEASE_VERSION }}\"
      - id: tests
        name: Run tests
        run: mvn prepare-package -Prun-js-tests,include-mapapps-deps
      - id: nexus_deployment
        name: Publish to Nexus
        run: mvn deploy -Pcompress -Dmaven.test.skip.exec=true -Ddist.releases.id=${{ secrets.NEXUS_ID }} -Ddist.releases.url=${{ secrets.NEXUS_URL_RELEASE }} -Ddist.snapshots.id=${{ secrets.NEXUS_ID }} -Ddist.snapshots.url=${{ secrets.NEXUS_URL_SNAPSHOTS }}
      - id: release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "target/${{ steps.project_artifact_id.outputs.artifactId }}-bundle.zip,target/${{ steps.project_artifact_id.outputs.artifactId }}-sample-app.zip"
          preRelease: false
          allowUpdates: true
          tag: ${{ env.RELEASE_VERSION }}
          token: ${{ secrets.RELEASE_TOKEN }}
      - id: write_dev_versions_to_manifest
        name: Update versions in manifest.json files to ${{ env.NEXT_DEV_VERSION }}
        run: mvn validate -P write-release-versions -Dreplace.target.version=${{ env.NEXT_DEV_VERSION }}
      - id: write_dev_versions_to_pom
        name: Update versions in pom.xml files to ${{ env.NEXT_DEV_VERSION }}
        run: mvn versions:set -DnewVersion=${{ env.NEXT_DEV_VERSION }} -DgenerateBackupPoms=false
      - id: check_in_dev_versions
        name: Write dev versions
        run: mvn scm:checkin -DpushChanges=true -Dmessage=\"[update-version] to ${{ env.NEXT_DEV_VERSION }}\"
